name: Deploy Static Site to GitHub Pages

# Trigger the workflow on push to main branch or manual dispatch
on:
  push:
    branches: [main]
    paths:
      - "time-triggered-functions-flow-diagram.html"
      - ".github/workflows/deploy-static-site.yml"
  pull_request:
    branches: [main]
    paths:
      - "time-triggered-functions-flow-diagram.html"
  workflow_dispatch: # Allow manual triggering

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job // check
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Create static site structure
        run: |
          # Create a docs directory for GitHub Pages
          mkdir -p docs

          # Copy the main flow diagram
          cp time-triggered-functions-flow-diagram.html docs/index.html

          # Create additional pages if needed
          cat > docs/README.md << 'EOF'
          # ICS Azure Functions - Flow Diagram

          This site contains the interactive flow diagram for the ICS Azure Functions timer-triggered workflow system.

          ## Pages Available:
          - [Flow Diagram](./index.html) - Interactive diagram showing the complete timer-triggered functions workflow

          ## About
          This diagram illustrates the architecture and flow of the ICS (Industrial Control Systems) Azure Functions application, including:
          - Timer-triggered functions for automated processing
          - Data flow between Cumulocity IoT platform and Azure services
          - Email notification system
          - Cosmos DB data storage and retrieval
          - Service Bus messaging

          ## Last Updated
          $(date)
          EOF

          # Create a simple navigation page
          cat > docs/about.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>About - ICS Azure Functions</title>
              <style>
                  body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                  .header { background: #0078d4; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                  .nav { margin: 20px 0; }
                  .nav a { margin-right: 20px; color: #0078d4; text-decoration: none; }
                  .nav a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>ICS Azure Functions - Documentation</h1>
                  <p>Timer-triggered workflow system for industrial IoT data processing</p>
              </div>
              
              <div class="nav">
                  <a href="./index.html">🔄 Flow Diagram</a>
                  <a href="./about.html">📖 About</a>
                  <a href="https://github.com/HPControls/ics-azure-functions-otifications">📂 GitHub Repository</a>
              </div>
              
              <h2>System Overview</h2>
              <p>The ICS Azure Functions system provides automated processing of industrial IoT data with the following key components:</p>
              
              <h3>🕒 Timer-Triggered Functions</h3>
              <ul>
                  <li><strong>dailyKpiMailer</strong> - Processes daily KPI data and generates email reports</li>
                  <li><strong>fetchDevicesBackgroundJob</strong> - Syncs device data from Cumulocity IoT platform</li>
                  <li><strong>fetchUserCumulocityToCosmos</strong> - Syncs user profiles and notification preferences</li>
                  <li><strong>sendingMailBackgroundJob</strong> - Processes email queue and delivers reports</li>
                  <li><strong>weeklyKpiMailer</strong> - Generates comprehensive weekly performance reports</li>
              </ul>
              
              <h3>🏗️ Infrastructure Components</h3>
              <ul>
                  <li><strong>Azure Functions</strong> - Serverless compute for timer-triggered workflows</li>
                  <li><strong>Cosmos DB (MongoDB API)</strong> - Document database for user and device data</li>
                  <li><strong>Service Bus</strong> - Message queuing for email processing</li>
                  <li><strong>Application Insights</strong> - Monitoring and diagnostics</li>
                  <li><strong>Storage Account</strong> - Function app storage and file handling</li>
              </ul>
              
              <h3>🔐 Security Features</h3>
              <ul>
                  <li><strong>Managed Identity</strong> - Secure authentication to Azure services</li>
                  <li><strong>Microsoft Defender for Cloud</strong> - Security monitoring and threat protection</li>
                  <li><strong>HTTPS Enforcement</strong> - All communications encrypted</li>
                  <li><strong>Key Vault Integration</strong> - Secure storage of secrets and credentials</li>
              </ul>
              
              <h3>📊 Monitoring & Observability</h3>
              <ul>
                  <li><strong>Application Insights</strong> - Performance monitoring and logging</li>
                  <li><strong>Custom Dashboards</strong> - Real-time metrics and alerts</li>
                  <li><strong>Health Checks</strong> - Automated system health monitoring</li>
              </ul>
              
              <p><em>Last updated: $(date)</em></p>
          </body>
          </html>
          EOF

          # List created files
          echo "Created static site structure:"
          find docs -type f -exec ls -la {} \;

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Notification job (optional)
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Static site deployed successfully!"
            echo "🌐 Site URL: ${{ needs.deploy.outputs.page_url }}"
            echo "📊 Flow Diagram: ${{ needs.deploy.outputs.page_url }}"
            echo "📖 About Page: ${{ needs.deploy.outputs.page_url }}about.html"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
